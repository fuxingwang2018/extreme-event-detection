#
#       Configuration File for Extreme_Event_Detection
#
#  	-- Modify the []-sections with user defined settings
#
# 	*** N.B. ***
# 	Please read through RCAT documentation on how to set the configurations:
# 	https://extreme-event-detection.readthedocs.io/en/latest/
#


# -- User settings --#

[MODELS]
# Define paths to model data, grid specifications and dates for analysis

model_1 = {
	'fpath': '/path/to/netcdf/files',
	'grid type': 'reg', 'grid name': 'label_grid_model_1',
	'start year': 1998, 'end year': 2000, 'months': [1,2,3,4,5,6,7,8,9,10,11,12],
     	'chunks_time': {'time': -1}, 'chunks_x': {'x': -1}, 'chunks_y': {'y': -1},
	}
model_2 = {
	'fpath': '/path/to/netcdf/files',
	'grid type': 'reg', 'grid name': 'label_grid_model_2',
	'start year': 1998, 'end year': 2000, 'months': [1,2,3,4,5,6,7,8,9,10,11,12],
     	'chunks_time': {'time': -1}, 'chunks_x': {'x': -1}, 'chunks_y': {'y': -1},
	}

[OBS]
# Years and months for observations
# Obs data names are specified by variable under 'variables' in SETTINGS section.
# Metadata file should be specific for the platform/system RCAT is applied on.
# See more information in RCAT documentation.
metadata file = /<path-to-rcat>/config/observations_metadata_Bi.py
start year = 1998
end year = 2000
months = [1,2,3,4,5,6,7,8,9,10,11,12]


[SETTINGS]

output dir = /nobackup/rossby27/users/sm_fuxwa/extreme_detection/output

variables = {
 'tas': {
    'freq': 'day',
    'units': 'K',
    'scale factor': None,
    'accumulated': False,
    'obs': 'ERA5',
    'obs scale factor': None,
    'var names': {'model_1': {'prfx': 'tas', 'vname': 'var167'}},
    'regrid to': 'ERA5',
    'regrid method': 'bilinear'},
    }


# -- Modification of input variable(s) --#
# Option to create new variables based on user defined expression.
# Set 'variable modification = None' to not do any modifications.
# Read RCAT documentation (see top) for information how to configure.

# variable modification = None
variable modification = {
 'sfcWind': {
 	'models': 'all',
 	'obs': None,
 	'input': {'x': 'uas', 'y': 'vas'},
	'expression': 'np.sqrt(x**2 + y**2)',
	'replace': True,
	}
 }


# Regions to extract: Empty or list [reg1, reg2, ...
#regions = ['Fenno-Scandinavia', 'East Europe', 'Mediterranean Sea']
coordinates_of_detection_area = {'lonmin':16, 'lonmax':19, 'latmin':58, 'latmax':60} 


[STATISTICS]
# Statistics to calculate;
stats = {
#	'annual cycle': 'default',
#	'seasonal cycle': {'stat method': 'mean', 'thr': {'pr': 1.0}},
#	'percentile': {'resample resolution': ['D', 'max'], 'pctls': [90, 95, 99, 99.9]},
#	'pdf': {'thr': {'pr': 1.0}, 'bins': {'pr': (0, 50, 1), 'tas': (265, 290, 5)}},
        'threshold_based': {'threshold_method': 'percentile', 'filter_method': 'percentile', 'pctl_threshold': 95, 'perc_of_days': 15} 
    }

[PLOTTING]
# Do validation plots -- a standard set of plots for general validation 
validation plot = True

# Map plot settings
    width_def = 1.6E5
    height_def = 1.9E5
# Example of configuration displayed here; for default settings set all properties to empty dictionaries -- {}
# Choose proj_def: 'ortho', 'lcc'
# Choose res_def: 'c'(crude), 'l'(low), 'i'(intermediate), 'h'(high), 'f'(full) or None.
map configure = {'proj': 'lcc', 'res': 'i', 'zoom': 'geom', 'zoom_geom': [1.6E5, 1.9E5], 'lon_0': 18.0, 'lat_0': 59.6}
#map configure = {'proj': 'stere', 'res': 'l', 'zoom': 'geom', 'zoom_geom': [1700000, 2100000], 'lon_0': 16.5, 'lat_0': 63}
map grid setup = {'axes_pad': 0.5, 'cbar_mode': 'each', 'cbar_location': 'right',
              	  'cbar_size': '5%%', 'cbar_pad': 0.03}
map kwargs = {'filled': True, 'mesh': True}

# Line plot settings
line grid setup = {'axes_pad': (11., 6.)}
line kwargs = {'lw': 2.5}


[CLUSTER]
# Local pc or SLURM are implemented.

# local/slurm
cluster type = slurm

# SLURM
# Default (not needed to set here) is set to a normal compute node for Bi, 
# which has 64GB memory. And walltime is set to 1 hour.
# If fat node is requested in job_extra, increase memory to 256GB.
nodes = 10

# extra key word arguments for chosen cluster
cluster kwargs = {'walltime': '02:00:00'}
# cluster kwargs = {'walltime': '02:00:00', 'memory': '256GB', 'job_extra': ['-C fat']}
